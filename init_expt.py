import numpy as np
from state import rho
import random
import matplotlib.pyplot as plt
from fit import *
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import scipy.stats as sts
from Gamma import *
from sigma import *
from sylvster import *

photon = 10**4

s_range = np.linspace(-1,1,num=photon)
p_range = np.linspace(0,1,num=photon) 

measurement = np.array([[[0.48, 0.016, 0.0033, -0.00136],
[0.016, 0.61, 0.0322, -0.00972], [0.00332, 0.0322, 0.563, -0.04374], 
[-0.00136, -0.00972, -0.04374, 0.5817]], [[-0.478, 
  0.0162, -0.00332,
-0.00136], [0.01621,
-0.61, 0.032, 
  0.00972], [-0.00332, 
  0.032, -0.5626, -0.04374],
[-0.0013576, 
  0.00972, -0.04374, 
-0.58]], [[0.5, 
  0.028, 0,
-0.00085], [0.028, 0.5,
   0.01185, 0], [0, 
  0.01185, 
  0.5, -0.0484],
[-0.000847, 
  0, -0.0484, 
  0.5]]])


def pdf(s1,s2,p,m):
    state = rho(s1,s2,p)
    return np.trace(np.matmul(state,m))

s1 = 0.5
s2 = -0.2
p = 0.3
s1_var = np.random.uniform(-0.5,0.5,photon)
s2_var = np.random.uniform(-0.5,0.5,photon)
a = np.array([p,1-p])
b = np.random.dirichlet((a[0],a[1]), photon)
dataset = np.zeros((3,1000))
for m in range(len(measurement)):
    for data in range(1000):
        dataset[m][data] = pdf(s1+np.array(s1_var)[data],s2+np.array(s2_var)[data],np.array(b)[data][0],measurement[m])

n, bins = np.histogram(dataset[2], 999)
posterior_param = [fit(dataset[0]),fit(dataset[1]),fit(dataset[2],dirichlet=True,x=bins,init_a=a)]

def update_param(dist,param,dirichlet=False):
    if not dirichlet:
        prob = Gaussian(param,dist[0],dist[1])
    else:
        prob = Dirichlet(param,dist)
    return sum([x*p for x,p in zip(param,prob)])/sum([p for p in prob])

# estimation = np.array([update_param(posterior_param[0],s_range),update_param(posterior_param[1],s_range),update_param(posterior_param[2],p_range)])
# print(estimation)
estimation = np.array([ 0.4651192,  -0.46325115,  0.37969934])

# a = estimation[-1]*(a-2)+1
a = np.array([0.35451112, 0.50639085])
# print(a)

# [ 0.4651192  -0.46325115  0.37969934]
# [0.35451112 0.50639085]
G0 = np.array([[ 9.47503153e-01, -1.44280570e-02,  1.27675679e-02,  3.89870218e-04],
 [-1.44280570e-02,  1.27626863e-02, -1.89684599e-04, -3.56502597e-04],
 [ 1.27675679e-02, -1.89684599e-04,  1.73347368e-04,  5.41451957e-06],
 [ 3.89870218e-04, -3.56502597e-04,  5.41451957e-06,  9.65587154e-06]])
G1 = np.array([[ 4.40663979e-01, -6.67446026e-03,  5.94735468e-03,  1.77984255e-04],
 [-6.67446026e-03,  5.94507289e-03, -8.66401519e-05, -1.66314623e-04],
 [ 5.94735468e-03, -8.66401519e-05,  8.08371206e-05,  2.58958818e-06],
 [ 1.77984255e-04, -1.66314623e-04,  2.58958818e-06,  2.83879944e-06]])
G2 = np.array([[-4.38877728e-01,  6.73593872e-03, -5.92734916e-03, -1.85366341e-04],
 [ 6.73593872e-03, -5.92507280e-03,  9.01314495e-05,  1.65866144e-04],
 [-5.92734916e-03,  9.01314495e-05, -8.06179301e-05, -2.97759617e-06],
 [-1.85366341e-04,  1.65866144e-04, -2.97759617e-06, -2.87405537e-06]])
Gb = np.array([[ 4.10672513e-01,  9.56913656e-03,  5.54102975e-03, -2.71503585e-04],
 [ 9.56913656e-03,  5.53890637e-03,  1.31944151e-04, -1.54829996e-04],
 [ 5.54102975e-03,  1.31944151e-04,  7.52674681e-05, -4.19947912e-06],
 [-2.71503585e-04, -1.54829996e-04, -4.19947912e-06,  2.57533545e-06]])
# G0 = Gamma0(posterior_param,rho)
# print(G0)
# G1 = Gamma_s1(posterior_param,rho)
# print(G1)
# G2 = Gamma_s2(posterior_param,rho)
# print(G2)
# Gb = Gamma_p(posterior_param,rho)
# print(Gb)

# G0 = np.array([[ 2.00770821e-0, -7.45473429e-05,  2.70414321e-04,  1.79327650e-06],
#  [-7.45473429e-05,  2.70310905e-04, -8.75020724e-07, -7.55049789e-06],
#  [ 2.70414321e-04, -8.75020724e-07,  3.67181749e-06,  2.13143932e-08],
#  [ 1.79327650e-06, -7.55049789e-06,  2.13143932e-08,  2.12645897e-07]])
# G1 = np.array(
# [[ 9.33633631e-03, -3.38005609e-05,  1.25976002e-04,  7.53936064e-07],
#  [-3.38005609e-05,  1.25927648e-04, -3.68794987e-07, -3.52399471e-06],
#  [ 1.25976002e-04, -3.68794987e-07,  1.71364436e-06,  8.14951923e-09],
#  [ 7.53936064e-07, -3.52399471e-06,  8.14951923e-09,  9.93267844e-08]])
# G2 = np.array([[-9.29210623e-03,  3.56035747e-05, -1.25438218e-04, -9.30055893e-07],
#  [ 3.56035747e-05, -1.25390030e-04,  4.52714507e-07,  3.51050231e-06],
#  [-1.25438218e-04,  4.52714507e-07, -1.70706248e-06, -1.22104660e-08],
#  [-9.30055893e-07,  3.51050231e-06, -1.22104660e-08, -9.89884687e-08]])
# Gb = np.array(
# [[ 9.69561168e-03, -3.35276980e-05,  1.30589605e-04,  7.97201394e-07],
#  [-3.35276980e-05,  1.30539662e-04, -3.89127399e-07, -3.64630730e-06],
#  [ 1.30589605e-04, -3.89127399e-07,  1.77322229e-06,  9.39958310e-09],
#  [ 7.97201394e-07, -3.64630730e-06,  9.39958310e-09,  1.02608973e-07]])

# sig = Sigma(posterior_param,measurement,G0)
# print(sig)
# [[-0.40468993  0.20645028 -0.22963641]
#  [ 0.20645028  0.51987143  0.22822806]
#  [-0.22963641  0.22822806 -0.47201815]]
# h = H(sig)
# print(h)
h = np.array([-0.63761435,  0.7533642,  0.16090433])

# M = np.array([Solve_sylvester(G0,h[0]*G1),Solve_sylvester(G0,h[1]*G2),Solve_sylvester(G0,h[2]*Gb)])
# print(M)

M = np.array([[[-2.96566856e-01, -3.15343577e-04,  1.83590388e-03, -9.32847603e-03],
  [-3.15343577e-04, -2.99317860e-01,  1.91922061e-02, -8.00185572e-02],
  [ 1.83590388e-03,  1.91922061e-02, -4.33090504e-01,  6.89374063e-01],
  [-9.32847603e-03, -8.00185572e-02,  6.89374063e-01, -3.15172141e+00]],

 [[-3.48970039e-01, -1.28681433e-04,  1.27856367e-03, -7.10471264e-03],
  [-1.28681433e-04, -3.52446881e-01,  1.48126625e-02, -9.92528828e-02],
  [ 1.27856367e-03,  1.48126625e-02, -4.44655501e-01,  5.22812386e-01],
  [-7.10471264e-03, -9.92528828e-02,  5.22812386e-01, -3.89503764e+00]],

 [[ 6.98357577e-02,  5.53152144e-03, -9.89937282e-04,  4.70460340e-03],
  [ 5.53152144e-03,  7.63358425e-02, -9.97966335e-03,  1.43063748e-02],
  [-9.89937282e-04, -9.97966335e-03,  1.43088272e-01, -3.59590644e-01],
  [ 4.70460340e-03,  1.43063748e-02, -3.59590644e-01,  5.82802721e-01]]])

# M = np.array([[[-3.13582180e-03,  1.09498440e-05, -4.22333026e-05, -2.56157534e-07],
#   [ 1.09498440e-05, -3.14113687e-01, -1.97325335e-04,  1.13157479e-03],
#   [-4.22333026e-05, -1.97325335e-04, -3.11652348e-01,  2.97273116e-04],
#   [-2.56157534e-07,  1.13157479e-03,  2.97273116e-04, -2.74830354e-01]],

#  [[-3.32800967e-03,  1.29635013e-05, -4.48212049e-05, -3.08773425e-07],
#   [ 1.29635013e-05, -3.33520554e-01,  2.19075230e-04,  1.18549385e-03],
#   [-4.48212049e-05,  2.19075230e-04, -3.30947716e-01, -3.64141958e-04],
#   [-3.08773425e-07,  1.18549385e-03, -3.64141958e-04, -2.92600835e-01]],

#  [[ 8.11068456e-04, -2.57332404e-06,  1.09234844e-05,  5.94855546e-08],
#   [-2.57332404e-06,  8.11010436e-02,  4.38846801e-05, -2.21743393e-04],
#   [ 1.09234844e-05,  4.38846801e-05,  8.03144054e-02, -3.19338956e-06],
#   [ 5.94855546e-08, -2.21743393e-04, -3.19338956e-06,  7.31686497e-02]]])
# print(mu, sigma)
# n, bins = np.histogram(dataset[2], 60)
# plt.plot(bins, Gaussian(bins,mu,sigma), 'r--', linewidth=2)
# plt.hist(bins[:-1], bins, weights=n)
# plt.xlabel('Smarts')
# plt.ylabel('Probability')
# plt.title(r'$\mathrm{Histogram\ of\ IQ:}\ \mu=%.3f,\ \sigma=%.3f$' %(mu, sigma))
# plt.show()