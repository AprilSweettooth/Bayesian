import numpy as np

def rho1(s1):
    return np.array([[(1 + 1/128*(-4 + s1)*s1**2*(4 + s1))**2, -((
   s1*(-8 + s1**2)*(128 - 16*s1**2 + s1**4))/4096), -((
   s1**2*(-8 + s1**2)*(128 - 16*s1**2 + s1**4))/16384), -((
   s1**3*(128 - 16*s1**2 + s1**4))/4096)], [-((
   s1*(-8 + s1**2)*(128 - 16*s1**2 + s1**4))/4096), (-8*s1 + s1**3)**2/
  1024, (s1**3*(-8 + s1**2)**2)/4096, (s1**4*(-8 + s1**2))/
  1024], [-((s1**2*(-8 + s1**2)*(128 - 16*s1**2 + s1**4))/16384), (
  s1**3*(-8 + s1**2)**2)/4096, (s1**4*(-8 + s1**2)**2)/16384, (
  s1**5*(-8 + s1**2))/4096], [-((s1**3*(128 - 16*s1**2 + s1**4))/4096), (
  s1**4*(-8 + s1**2))/1024, (s1**5*(-8 + s1**2))/4096, s1**6/1024]])

def rho(s1,s2,p):
    return p*rho1(s1)+(1-p)*rho1(s2)

def filter(t,s1,s2,p,s1_est):
    K = t*rho1(s1_est) + np.eye(4) - rho1(s1_est)
    density = np.matmul(K,np.matmul(rho(s1,s2,p),K))
    return density/np.trace(density)